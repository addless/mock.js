{
    "should ignore request based on headers": {
        "setup mock": [
            "dropAllMocks", [],
            "ifRequestHeader", [{"a": "1, 1"}],
            "ifRequestHeader", [{"b": " /^1$/ "}],
            "setResponseStatus", [1],
            "setResponseHeader", [{"c": 1}],
            "setResponseHeader", [{"c": 1, "d": 1}],
            "setResponseBody", ["base/spec/mocked.json"]
        ],
        "setup request": [
            "open", ["GET", "base/spec/actual.json"],
            "setRequestHeader", ["a", 1]
        ],
        "send request": [
            []
        ],
        "check response properties": [
            "responseText", "{\"actual\":\"json\"}",
            "status", 200
        ],
        "check response headers": [
            "getResponseHeader", ["c"], null,
            "getResponseHeader", ["d"], null,
            "getResponseHeader", ["e"], null
        ]
    },
    "should mock request based on headers": {
        "setup request": [
            "open", ["GET", "base/spec/actual.json"],
            "setRequestHeader", ["a", 1],
            "setRequestHeader", ["a", 1],
            "setRequestHeader", ["b", 1]
        ],
        "send request": [
            []
        ],
        "check response properties": [
            "responseText", "{\"mocked\":\"json\"}",
            "status", 1
        ],
        "check response headers": [
            "getAllResponseHeaders", [], "c:1, 1\r\nd:1",
            "getResponseHeader", ["c"], "1, 1",
            "getResponseHeader", ["d"], "1",
            "getResponseHeader", ["e"], null
        ]
    },
    "should ignore request based on URL pattern": {
        "setup mock": [
            "dropAllMocks", [],
            "ifRequestURL", [" /1$/ "],
            "setResponseStatus", [1],
            "setResponseHeader", [{"c": 1}],
            "setResponseHeader", [{"c": 1, "d": 1}],
            "setResponseBody", ["base/spec/mocked.json"]
        ],
        "setup request": [
            "open", ["GET", "base/spec/actual.json"]
        ],
        "send request": [
            []
        ],
        "check response properties": [
            "responseText", "{\"actual\":\"json\"}",
            "status", 200
        ],
        "check response headers": [
            "getResponseHeader", ["c"], null,
            "getResponseHeader", ["d"], null,
            "getResponseHeader", ["e"], null
        ]
    },
    "should mock request based on URL pattern": {
        "setup request": [
            "open", ["GET", "base/spec/actual.json?1"]
        ],
        "send request": [
            []
        ],
        "check response properties": [
            "responseText", "{\"mocked\":\"json\"}",
            "status", 1
        ],
        "check response headers": [
            "getAllResponseHeaders", [], "c:1, 1\r\nd:1",
            "getResponseHeader", ["c"], "1, 1",
            "getResponseHeader", ["d"], "1",
            "getResponseHeader", ["e"], null
        ]
    },
    "should reset mocked status": {
        "reuse prev xhr": [],
        "setup request": [
            "open", ["GET", "base/spec/actual.json"]
        ],
        "send request": [
            []
        ],
        "check response properties": [
            "responseText", "{\"actual\":\"json\"}",
            "status", 200
        ]
    },
    "should ignore request based on URL equality": {
        "setup mock": [
            "dropAllMocks", [],
            "ifRequestURL", ["http://localhost:9876/1"],
            "setResponseStatus", [1],
            "setResponseHeader", [{"c": 1}],
            "setResponseHeader", [{"c": 1, "d": 1}],
            "setResponseBody", ["base/spec/mocked.json"]
        ],
        "setup request": [
            "open", ["GET", "base/spec/actual.json"]
        ],
        "send request": [
            []
        ],
        "check response properties": [
            "responseText", "{\"actual\":\"json\"}",
            "status", 200
        ],
        "check response headers": [
            "getResponseHeader", ["c"], null,
            "getResponseHeader", ["d"], null,
            "getResponseHeader", ["e"], null
        ]
    },
    "should mock request based on URL equality": {
        "setup request": [
            "open", ["GET", "/1"]
        ],
        "send request": [
            []
        ],
        "check response properties": [
            "responseText", "{\"mocked\":\"json\"}",
            "status", 1
        ],
        "check response headers": [
            "getAllResponseHeaders", [], "c:1, 1\r\nd:1",
            "getResponseHeader", ["c"], "1, 1",
            "getResponseHeader", ["d"], "1",
            "getResponseHeader", ["e"], null
        ]
    },
    "should ignore request based on method": {
        "setup mock": [
            "dropAllMocks", [],
            "ifRequestMethod", ["1"],
            "setResponseStatus", [1],
            "setResponseHeader", [{"c": 1}],
            "setResponseHeader", [{"c": 1, "d": 1}],
            "setResponseBody", ["base/spec/mocked.json"]
        ],
        "setup request": [
            "open", ["GET", "base/spec/actual.json"]
        ],
        "send request": [
            []
        ],
        "check response properties": [
            "responseText", "{\"actual\":\"json\"}",
            "status", 200
        ],
        "check response headers": [
            "getResponseHeader", ["c"], null,
            "getResponseHeader", ["d"], null,
            "getResponseHeader", ["e"], null
        ]
    },
    "should mock request based on method": {
        "setup request": [
            "open", ["1", "base/spec/actual.json"]
        ],
        "send request": [
            []
        ],
        "check response properties": [
            "responseText", "{\"mocked\":\"json\"}",
            "status", 1
        ],
        "check response headers": [
            "getAllResponseHeaders", [], "c:1, 1\r\nd:1",
            "getResponseHeader", ["c"], "1, 1",
            "getResponseHeader", ["d"], "1",
            "getResponseHeader", ["e"], null
        ]
    },
    "should ignore request based on body": {
        "setup mock": [
            "dropAllMocks", [],
            "ifRequestBody", [{"a": 1, "b": " /^1$/ "}],
            "ifRequestBody", [{"c": [1, " /^1$/ "]}],
            "setResponseStatus", [1],
            "setResponseHeader", [{"c": 1}],
            "setResponseHeader", [{"c": 1, "d": 1}],
            "setResponseBody", ["base/spec/mocked.json"]
        ],
        "setup request": [
            "open", ["GET", "base/spec/actual.json"]
        ],
        "send request": [
            []
        ],
        "check response properties": [
            "responseText", "{\"actual\":\"json\"}",
            "status", 200
        ],
        "check response headers": [
            "getResponseHeader", ["c"], null,
            "getResponseHeader", ["d"], null,
            "getResponseHeader", ["e"], null
        ]
    },
    "should mock request based on body": {
        "setup request": [
            "open", ["1", "base/spec/actual.json"]
        ],
        "send request": [
           ["{\"a\": 1, \"b\": 1, \"c\": [1, 1]}"]
        ],
        "check response properties": [
            "responseText", "{\"mocked\":\"json\"}",
            "status", 1
        ],
        "check response headers": [
            "getAllResponseHeaders", [], "c:1, 1\r\nd:1",
            "getResponseHeader", ["c"], "1, 1",
            "getResponseHeader", ["d"], "1",
            "getResponseHeader", ["e"], null
        ]
    },
    "should apply request delay appropriately": {
        "setup mock": [
            "dropAllMocks", [],
            "ifRequestBody", ["1"],
            "setResponseDelay", [1500]
        ],
        "register event listener via 'addEventListener'": [
            "readystatechange",
            "loadstart",
            "loadend",
            "load"
        ],
        "register event listener via 'on' handler": [
            "onreadystatechange",
            "onloadstart",
            "onloadend",
            "onload"
        ],
        "setup request": [
            "open", ["GET", "base/spec/actual.json"]
        ],
        "send request": [
            ["1"]
        ],
        "check response time": [
            "onreadystatechange", 1500, 2000,
            "readystatechange", 1500, 2000,
            "onloadstart", 0, 1500,
            "loadstart", 0, 1500,
            "onloadend", 1500, 2000,
            "loadend", 1500, 2000,
            "onload", 1500, 2000,
            "load", 1500, 2000
        ]
    }
}